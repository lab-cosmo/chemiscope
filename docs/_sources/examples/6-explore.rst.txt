
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/6-explore.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_6-explore.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_6-explore.py:


.. _explore-example:

Exploring dataset with chemiscope
=================================

The :py:func:`chemiscope.explore` function provides a streamlined way to visualize
datasets as the low dimensional maps. This approach provides a quick and interactive
overview of dataset composition and structure without the need to manually implement and
configure the representation processes. This is particularly useful when the specific
choice of hyperparameters does not significantly impact the resulting low-dimensionality
map.

By passing a list of `ase.Atoms <https://wiki.fysik.dtu.dk/ase/ase/atoms.html>`_ objects
(or similar structures from other libraries) to :py:func:`chemiscope.explore`, it is
possible to generate a chemiscope widget, providing an immediate and intuitive
visualization of the dataset.

By default, the method uses the `PETMADFeaturizer <https://arxiv.org/abs/2506.19674>`_,
which computes representations as the `PET-MAD <https://arxiv.org/abs/2503.14118>`_
features and maps them a low-dimensional MAD dataset latent space.

For more advanced use cases, :py:func:`chemiscope.explore` allows to provide a custom
function for representation and dimensionality reduction.

To use this function, some additional dependencies are required. You can install them
with the following command:

.. code:: bash

    pip install chemiscope[explore]

In this example, we will explore basic and advanced use cases, from simple dataset
visualization to custom featurization.

First, let's import the necessary packages that will be used throughout the examples.

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: Python

    import ase.io

    import chemiscope









.. GENERATED FROM PYTHON SOURCE LINES 46-53

Basic example
+++++++++++++

This example shows the basic usage of :py:func:`chemiscope.explore`. First, load a
dataset of structures as `ase.Atoms <https://wiki.fysik.dtu.dk/ase/ase/atoms.html>`_
objects. Here, we use the samples from the `M3CD dataset
<https://doi.org/10.24435/materialscloud:rw-t0>`_:

.. GENERATED FROM PYTHON SOURCE LINES 54-58

.. code-block:: Python


    frames = ase.io.read("data/explore_m3cd.xyz", ":")









.. GENERATED FROM PYTHON SOURCE LINES 59-61

Next, pass the frames to :py:func:`chemiscope.explore` to generate an interactive
Chemiscope. In this basic case, we provide the featurizer version to be used:

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: Python


    chemiscope.explore(frames, featurizer="pet-mad-1.0")



.. chemiscope:: _datasets/fig_6-explore_007.json.gz
            :mode: default
            :warning_timeout: 2000
        

.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/metatrain/utils/io.py:193: UserWarning: trying to upgrade an old model checkpoint with unknown version, this might fail and require manual modifications
      warnings.warn(
      0%|          | 0/5 [00:00<?, ?it/s]     20%|██        | 1/5 [00:00<00:00,  5.51it/s]     60%|██████    | 3/5 [00:00<00:00, 10.70it/s]    100%|██████████| 5/5 [00:00<00:00, 12.53it/s]
    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/chemiscope/structures/_ase.py:121: UserWarning: the following atomic properties are only defined for a subset of frames: ['tags']; they will be ignored
      all_properties = _ase_get_atom_properties(frames)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 66-68

We can also save the visualization to send it to the colloborators or reopen
separatelly with :py:func:`chemiscope.read_input`:

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: Python

    chemiscope.explore(frames, featurizer="pet-mad-1.0", write_input="m3cd.chemiscope.json")




.. chemiscope:: _datasets/fig_6-explore_008.json.gz
            :mode: default
            :warning_timeout: 2000
        

.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/metatrain/utils/io.py:193: UserWarning: trying to upgrade an old model checkpoint with unknown version, this might fail and require manual modifications
      warnings.warn(
      0%|          | 0/5 [00:00<?, ?it/s]     80%|████████  | 4/5 [00:00<00:00, 36.92it/s]    100%|██████████| 5/5 [00:00<00:00, 26.93it/s]
    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/chemiscope/structures/_ase.py:121: UserWarning: the following atomic properties are only defined for a subset of frames: ['tags']; they will be ignored
      all_properties = _ase_get_atom_properties(frames)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 73-78

Besides this, it is possible to specify atom-centered environments and properties.
Environments can be manually defined as a list of tuples in the format
``(structure_index, atom_index, cutoff)`` or extracted automatically using
:py:func:`chemiscope.all_atomic_environments`. We can also configure visualisation
settings, such as axis and color properties.

.. GENERATED FROM PYTHON SOURCE LINES 79-91

.. code-block:: Python


    properties = chemiscope.extract_properties(frames, only=["energy"])
    environments = [(0, 0, 3.5), (1, 0, 3.5), (2, 1, 3.5)]
    settings = chemiscope.quick_settings(x="features[1]", y="features[2]", color="energy")
    chemiscope.explore(
        frames,
        featurizer="pet-mad-1.0",
        environments=environments,
        properties=properties,
        settings=settings,
    )



.. chemiscope:: _datasets/fig_6-explore_009.json.gz
            :mode: default
            :warning_timeout: 2000
        

.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/chemiscope/input.py:643: UserWarning: 'color' property is deprecated and replaced with 'map_color'
      warnings.warn(
    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/metatrain/utils/io.py:193: UserWarning: trying to upgrade an old model checkpoint with unknown version, this might fail and require manual modifications
      warnings.warn(
      0%|          | 0/5 [00:00<?, ?it/s]     60%|██████    | 3/5 [00:00<00:00, 24.47it/s]    100%|██████████| 5/5 [00:00<00:00, 22.77it/s]
    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/chemiscope/structures/_ase.py:121: UserWarning: the following atomic properties are only defined for a subset of frames: ['tags']; they will be ignored
      all_properties = _ase_get_atom_properties(frames)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 92-100

Example with custom featurizer
++++++++++++++++++++++++++++++

For advanced use cases, you can define a custom featurization function. For example,
we can describe structures based on their chemical compositions. The function must
take two arguments: ``frames`` (the input structures) and ``environments`` (optional
argument for the atom-centered environments). Below, we create a function to calculate
fractional composition vectors and apply PCA for dimensionality reduction:

.. GENERATED FROM PYTHON SOURCE LINES 101-128

.. code-block:: Python


    import numpy as np  # noqa
    from sklearn.decomposition import PCA  # noqa


    def fractional_composition_featurize(frames, environments):
        if environments is not None:
            raise ValueError("'environments' are not supported by this featurizer")

        dimentionality = 100

        features = []

        for frame in frames:
            unique, counts = np.unique(frame.numbers, return_counts=True)
            fractions = counts / len(frame.numbers)

            feature_vector = np.zeros(dimentionality)
            for element_number, franction in zip(unique, fractions):
                feature_vector[element_number - 1] = franction

            features.append(feature_vector)

        pca = PCA(n_components=3)
        return pca.fit_transform(features)









.. GENERATED FROM PYTHON SOURCE LINES 129-130

Pass the custom featurizer to :py:func:`chemiscope.explore`:

.. GENERATED FROM PYTHON SOURCE LINES 131-139

.. code-block:: Python


    settings = chemiscope.quick_settings(x="features[1]", y="features[2]")
    chemiscope.explore(
        frames,
        featurizer=fractional_composition_featurize,
        settings=settings,
    )



.. chemiscope:: _datasets/fig_6-explore_010.json.gz
            :mode: default
            :warning_timeout: 2000
        

.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/chemiscope/structures/_ase.py:121: UserWarning: the following atomic properties are only defined for a subset of frames: ['tags']; they will be ignored
      all_properties = _ase_get_atom_properties(frames)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 140-141

For more advanced examples, see the :ref:`next tutorial <advanced-explore-example>`.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.858 seconds)


.. _sphx_glr_download_examples_6-explore.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 6-explore.ipynb <6-explore.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 6-explore.py <6-explore.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 6-explore.zip <6-explore.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
