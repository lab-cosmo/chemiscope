
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/7-explore-advanced.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_7-explore-advanced.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_7-explore-advanced.py:


.. _advanced-explore-example:

Advanced dataset exploration
============================

The :ref:`previous example <explore-example>` introduced :py:func:`chemiscope.explore`
and how to use it for automatic exploration of dataset. In this example, we'll show some
more representations and give additional featurizers you can use in your own code.

.. GENERATED FROM PYTHON SOURCE LINES 13-33

.. code-block:: Python

    import os

    import ase.io
    import numpy as np
    import requests

    import chemiscope


    def fetch_dataset(filename, base_url="https://zenodo.org/records/12748925/files/"):
        """Helper function to load the pre-computed examples"""
        local_path = "data/" + filename
        if not os.path.isfile(local_path):
            response = requests.get(base_url + filename)
            with open(local_path, "wb") as file:
                file.write(response.content)


    fetch_dataset("mace-off-tsne-qm9.json.gz")








.. GENERATED FROM PYTHON SOURCE LINES 34-47

Example with MACE-OFF and t-SNE
+++++++++++++++++++++++++++++++

In this part, we are going to define ``featurize`` function that calculates desciptors
with `MACE-OFF <https://github.com/ACEsuit/mace>`_ and uses `t-SNE
<https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html>`_ for
the dimensionality reduction.

The dependencies for this example can be installed with the following command:

.. code:: bash

    pip install mace-torch scikit-learn

.. GENERATED FROM PYTHON SOURCE LINES 50-51

Let's import the necessary libraries.

.. GENERATED FROM PYTHON SOURCE LINES 52-56

.. code-block:: Python


    from mace.calculators import mace_off  # noqa
    from sklearn.manifold import TSNE  # noqa





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/e3nn/o3/_wigner.py:10: UserWarning: Environment variable TORCH_FORCE_NO_WEIGHTS_ONLY_LOAD detected, since the`weights_only` argument was not explicitly passed to `torch.load`, forcing weights_only=False.
      _Jd, _W3j_flat, _W3j_indices = torch.load(os.path.join(os.path.dirname(__file__), 'constants.pt'))
    cuequivariance or cuequivariance_torch is not available. Cuequivariance acceleration will be disabled.




.. GENERATED FROM PYTHON SOURCE LINES 57-58

Load the dataset, in our example we are reading the organic molecules.

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: Python


    qm9_frames = ase.io.read("data/explore_qm9.xyz", ":")








.. GENERATED FROM PYTHON SOURCE LINES 63-65

Now, we are defining a ``featurize`` function. As on the previous example, it should
take ``frames`` and ``environments`` as the inputs and return an array of features.

.. GENERATED FROM PYTHON SOURCE LINES 66-96

.. code-block:: Python



    def mace_off_tsne(frames, environments):
        if environments is not None:
            raise ValueError("'environments' are not supported by this featurizer")

        # At first, we initialize a mace_off calculator:
        descriptor_opt = {"model": "small", "device": "cpu", "default_dtype": "float64"}
        calculator = mace_off(**descriptor_opt)

        # Calculate MACE features for each frame
        descriptors = []
        for frame in frames:
            structure_avg = np.mean(
                # Only use invariant descriptors (no rotational components)
                (calculator.get_descriptors(frame, invariants_only=True)),
                axis=0,  # Average the descriptors over all atoms in the frame
            )
            descriptors.append(structure_avg)
        descriptors = np.array(descriptors)

        # Get number of jobs for parallelisation
        n_jobs = min(len(frames), os.cpu_count())

        # Apply t-SNE
        perplexity = min(30, descriptors.shape[0] - 1)
        reducer = TSNE(n_components=2, perplexity=perplexity, n_jobs=n_jobs)
        return reducer.fit_transform(descriptors)









.. GENERATED FROM PYTHON SOURCE LINES 97-98

We can also extract the additional properties, for example, dipole moment.

.. GENERATED FROM PYTHON SOURCE LINES 99-102

.. code-block:: Python


    properties = chemiscope.extract_properties(qm9_frames, only=["mu"])








.. GENERATED FROM PYTHON SOURCE LINES 103-104

Provide the created featurizer and the properties to :py:func:`chemiscope.explore`.

.. GENERATED FROM PYTHON SOURCE LINES 105-108

.. code-block:: Python


    cs = chemiscope.explore(qm9_frames, featurizer=mace_off_tsne, properties=properties)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading MACE model from 'https://github.com/ACEsuit/mace-off/blob/main/mace_off23/MACE-OFF23_small.model?raw=true'
    The model is distributed under the Academic Software License (ASL) license, see https://github.com/gabor1/ASL 
     To use the model you accept the terms of the license.
    ASL is based on the Gnu Public License, but does not permit commercial use
    Cached MACE model to /home/runner/.cache/mace/MACE-OFF23_small.model
    Using MACE-OFF23 MODEL for MACECalculator with /home/runner/.cache/mace/MACE-OFF23_small.model
    Using float64 for MACECalculator, which is slower but more accurate. Recommended for geometry optimization.
    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/mace/calculators/mace.py:197: UserWarning: Environment variable TORCH_FORCE_NO_WEIGHTS_ONLY_LOAD detected, since the`weights_only` argument was not explicitly passed to `torch.load`, forcing weights_only=False.
      torch.load(f=model_path, map_location=device)
    Using head Default out of ['Default']
    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/chemiscope/structures/_ase.py:162: UserWarning: values of the property 'frequencies' have inconsistent length across different structures, it will be ignored
      _remove_invalid_properties(properties, "ASE")
    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/chemiscope/structures/_ase.py:162: UserWarning: values of the property 'smiles' have inconsistent length across different structures, it will be ignored
      _remove_invalid_properties(properties, "ASE")
    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/chemiscope/structures/_ase.py:162: UserWarning: values of the property 'inchi' have inconsistent length across different structures, it will be ignored
      _remove_invalid_properties(properties, "ASE")




.. GENERATED FROM PYTHON SOURCE LINES 109-114

Here we display the visualization of the pre-computed data using the described
function for 6k structures taken from the `QM9
<https://jla-gardner.github.io/load-atoms/index.html>`_ dataset. The map is zoomed in
to highlight a cluster of zwitterions grouped together by running the previously
defined ``mace_off_tsne`` featurizer.

.. GENERATED FROM PYTHON SOURCE LINES 115-118

.. code-block:: Python


    chemiscope.show_input("data/mace-off-tsne-qm9.json.gz")



.. chemiscope:: _datasets/fig_7-explore-advanced_011.json.gz
            :mode: default
            :warning_timeout: 2000
        


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 119-127

Example with MACE-MP0, t-SNE and environments
+++++++++++++++++++++++++++++++++++++++++++++

This example demonstrates how to compute descriptors using the MACE-MP0 and t-SNE with
``environments`` parameter specifying which atoms in the frames are used for
calculating the descriptors.

Firstly, import mace library.

.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: Python


    from mace.calculators import mace_mp  # noqa








.. GENERATED FROM PYTHON SOURCE LINES 132-133

Load the frames. In this example we are loading the reduced M3CD dataset.

.. GENERATED FROM PYTHON SOURCE LINES 134-138

.. code-block:: Python


    m3cd_frames = ase.io.read("data/explore_m3cd.xyz", ":")









.. GENERATED FROM PYTHON SOURCE LINES 139-141

We are defining a featurizer function by basically repeating the steps from the
previous example but using different MACE calculator.

.. GENERATED FROM PYTHON SOURCE LINES 142-189

.. code-block:: Python



    def mace_mp0_tsne(frames, environments):
        # Initialize a mace-mp0 calculator
        descriptor_opt = {"model": "small", "device": "cpu", "default_dtype": "float64"}
        calculator = mace_mp(**descriptor_opt)

        # Calculate the features
        if environments is None:
            descriptors = []
            for frame in frames:
                structure_avg = np.mean(
                    (calculator.get_descriptors(frame, invariants_only=True)),
                    axis=0,
                )
                descriptors.append(structure_avg)
        else:
            grouped_envs = {}
            unique_structures = set()

            # Group atom indices from environments
            for structure_index, atom_index, _cutoff in environments:
                if structure_index not in grouped_envs:
                    grouped_envs[structure_index] = []
                grouped_envs[structure_index].append(atom_index)
                unique_structures.add(structure_index)

            # Compute descriptors per specified atom
            descriptors = []
            for structure_index in sorted(grouped_envs):
                atoms = frames[structure_index]
                atom_indices = grouped_envs[structure_index]

                full_descriptors = calculator.get_descriptors(atoms, invariants_only=True)
                for atom_index in atom_indices:
                    descriptors.append(full_descriptors[atom_index])

        descriptors = np.array(descriptors)

        n_jobs = min(len(descriptors), os.cpu_count())

        # Apply t-SNE
        perplexity = min(30, descriptors.shape[0] - 1)
        reducer = TSNE(n_components=2, perplexity=perplexity, n_jobs=n_jobs)
        return reducer.fit_transform(descriptors)









.. GENERATED FROM PYTHON SOURCE LINES 190-193

Provide a created function and environments to :py:func:`chemiscope.explore`. The
environments are manually defined following the format ``[index of structure, index
of atom, cutoff]``.

.. GENERATED FROM PYTHON SOURCE LINES 194-198

.. code-block:: Python


    chemiscope.explore(
        m3cd_frames, featurizer=mace_mp0_tsne, environments=[(1, 2, 3.5), (2, 0, 3.5)]
    )


.. chemiscope:: _datasets/fig_7-explore-advanced_012.json.gz
            :mode: default
            :warning_timeout: 2000
        

.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading MACE model from 'https://github.com/ACEsuit/mace-mp/releases/download/mace_mp_0/2023-12-10-mace-128-L0_energy_epoch-249.model'
    Cached MACE model to /home/runner/.cache/mace/20231210mace128L0_energy_epoch249model
    Using Materials Project MACE for MACECalculator with /home/runner/.cache/mace/20231210mace128L0_energy_epoch249model
    Using float64 for MACECalculator, which is slower but more accurate. Recommended for geometry optimization.
    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/mace/calculators/mace.py:197: UserWarning: Environment variable TORCH_FORCE_NO_WEIGHTS_ONLY_LOAD detected, since the`weights_only` argument was not explicitly passed to `torch.load`, forcing weights_only=False.
      torch.load(f=model_path, map_location=device)
    Using head Default out of ['Default']
    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/chemiscope/structures/_ase.py:121: UserWarning: the following atomic properties are only defined for a subset of frames: ['tags']; they will be ignored
      all_properties = _ase_get_atom_properties(frames)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.638 seconds)


.. _sphx_glr_download_examples_7-explore-advanced.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 7-explore-advanced.ipynb <7-explore-advanced.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 7-explore-advanced.py <7-explore-advanced.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 7-explore-advanced.zip <7-explore-advanced.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
