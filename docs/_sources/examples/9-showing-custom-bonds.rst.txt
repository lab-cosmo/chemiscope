
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/9-showing-custom-bonds.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_9-showing-custom-bonds.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_9-showing-custom-bonds.py:


Using stk structures and showing custom bonds
=============================================

This example demonstrates interfacing `stk <https://stk.readthedocs.io/en/stable/>`_
with chemiscope and the use of shapes to show custom bonding in a molecule.

`stk <https://stk.readthedocs.io/en/stable/>`_ comes with topology/bonding
information by default (using the cheminformatic software rdkit).

We use `stko <https://stko-docs.readthedocs.io/en/latest/>`_ to calculate
some rudimentary properties of `stk` molecules. `stko` can be installed with
``pip install stko``.

.. GENERATED FROM PYTHON SOURCE LINES 16-27

.. code-block:: Python


    import itertools as it

    import ase.io
    import stk
    import stko
    from rdkit.Chem import AllChem as rdkit

    import chemiscope









.. GENERATED FROM PYTHON SOURCE LINES 28-33

Interfacing chemiscope with stk molecules
++++++++++++++++++++++++++++++++++++++++++

Generate a list of stk BuildingBlocks (representation of a molecule) with
properties. We start by constructing a cage and host-guest complex with stk.

.. GENERATED FROM PYTHON SOURCE LINES 34-59

.. code-block:: Python


    cage = stk.ConstructedMolecule(
        topology_graph=stk.cage.FourPlusSix(
            building_blocks=(
                stk.BuildingBlock(
                    smiles="NCCN",
                    functional_groups=[stk.PrimaryAminoFactory()],
                ),
                stk.BuildingBlock(
                    smiles="O=CC(C=O)C=O",
                    functional_groups=[stk.AldehydeFactory()],
                ),
            ),
            optimizer=stk.MCHammer(),
        ),
    )
    host_guest = stk.ConstructedMolecule(
        topology_graph=stk.host_guest.Complex(
            host=stk.BuildingBlock.init_from_molecule(cage),
            guests=stk.host_guest.Guest(
                building_block=stk.BuildingBlock("[Br][Br]"),
            ),
        ),
    )








.. GENERATED FROM PYTHON SOURCE LINES 60-61

Including using stk to interface with rdkit molecules.

.. GENERATED FROM PYTHON SOURCE LINES 62-70

.. code-block:: Python


    rdkitmol = rdkit.MolFromSmiles("Cc1ccccc1")
    rdkitmol = rdkit.AddHs(rdkitmol)
    rdkit.Kekulize(rdkitmol)
    params = rdkit.ETKDGv3()
    params.randomSeed = 0xF00D
    rdkit.EmbedMolecule(rdkitmol, params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0



.. GENERATED FROM PYTHON SOURCE LINES 71-72

We can put this into a list of stk.Molecule objects.

.. GENERATED FROM PYTHON SOURCE LINES 73-125

.. code-block:: Python



    structures = [
        # A mostly optimised cage molecule.
        cage,
        # A host guest molecule.
        host_guest,
        # From rdkit.
        stk.BuildingBlock.init_from_rdkit_mol(rdkitmol),
        # A metal-organic cage.
        stk.ConstructedMolecule(
            stk.cage.M2L4Lantern(
                building_blocks=(
                    stk.BuildingBlock(
                        smiles="[Pd+2]",
                        functional_groups=(
                            stk.SingleAtom(stk.Pd(0, charge=2)) for i in range(4)
                        ),
                        position_matrix=[[0.0, 0.0, 0.0]],
                    ),
                    stk.BuildingBlock(
                        smiles=("C1=NC=CC(C2=CC=CC(C3=CC=NC=C3)=C2)=C1"),
                        functional_groups=[
                            stk.SmartsFunctionalGroupFactory(
                                smarts="[#6]~[#7X2]~[#6]",
                                bonders=(1,),
                                deleters=(),
                            ),
                        ],
                    ),
                ),
                # Ensure that bonds between the
                # GenericFunctionalGroups of the ligand and the
                # SingleAtom functional groups of the metal are
                # dative.
                reaction_factory=stk.DativeReactionFactory(
                    stk.GenericReactionFactory(
                        bond_orders={
                            frozenset(
                                {
                                    stk.GenericFunctionalGroup,
                                    stk.SingleAtom,
                                }
                            ): 9,
                        },
                    ),
                ),
            ),
        ),
    ]









.. GENERATED FROM PYTHON SOURCE LINES 126-129

Here we use stko (https://stko-docs.readthedocs.io/en/latest/) to compute
properties of each molecule in the list and format it into the dictionary
required by chemiscope.

.. GENERATED FROM PYTHON SOURCE LINES 130-140

.. code-block:: Python


    energy = stko.UFFEnergy(ignore_inter_interactions=False)
    shape_calc = stko.ShapeCalculator()
    properties = {
        "uffenergy": [energy.get_energy(molecule) for molecule in structures],
        "aspheriticty": [
            shape_calc.get_results(molecule).get_asphericity() for molecule in structures
        ],
    }








.. GENERATED FROM PYTHON SOURCE LINES 141-143

A chemiscope widget showing the result with standard bonding derived from the
bonding topology in stk.

.. GENERATED FROM PYTHON SOURCE LINES 144-160

.. code-block:: Python


    chemiscope.show(
        frames=structures,
        properties=properties,
        settings=chemiscope.quick_settings(
            x="aspheriticty",
            y="uffenergy",
            color="",
            structure_settings={
                "atoms": True,
                "bonds": True,
                "spaceFilling": False,
            },
        ),
    )



.. chemiscope:: _datasets/fig_9-showing-custom-bonds_015.json.gz
            :mode: default
            :warning_timeout: 2000
        

.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/chemiscope/chemiscope/.tox/docs/lib/python3.11/site-packages/chemiscope/input.py:643: UserWarning: 'color' property is deprecated and replaced with 'map_color'
      warnings.warn(


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 161-162

Writing to a json.gz file, again without added bonding.

.. GENERATED FROM PYTHON SOURCE LINES 163-181

.. code-block:: Python


    chemiscope.write_input(
        path="noshape_example.json.gz",
        frames=structures,
        properties=properties,
        meta=dict(name="Standard stk bonding."),
        settings=chemiscope.quick_settings(
            x="aspheriticty",
            y="uffenergy",
            color="",
            structure_settings={
                "atoms": True,
                "bonds": True,
                "spaceFilling": False,
            },
        ),
    )








.. GENERATED FROM PYTHON SOURCE LINES 182-186

For comparison, we show the same molecule imported with ASE versus stk, where
chemiscope will automatically try to detect the bonds based on the geometry
(because ASE does not contain this information), which will not be right due
to the far-from equilibrium nature of the structure.

.. GENERATED FROM PYTHON SOURCE LINES 187-204

.. code-block:: Python


    structures[0].write("data/stk_cage.xyz")
    chemiscope.show(
        frames=[ase.io.read("data/stk_cage.xyz")],
        properties={i: [properties[i][0]] for i in properties},
        settings=chemiscope.quick_settings(
            x="aspheriticty",
            y="uffenergy",
            color="",
            structure_settings={
                "atoms": True,
                "bonds": True,
                "spaceFilling": False,
            },
        ),
    )



.. chemiscope:: _datasets/fig_9-showing-custom-bonds_016.json.gz
            :mode: default
            :warning_timeout: 2000
        


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 205-215

Showing custom bonds beyond the existing topology
++++++++++++++++++++++++++++++++++++++++++++++++++

With the custom bond features, we can now overlay connections of interest on
the structure and existing topology by using, the
`convert_stk_bonds_to_shapes` function.
For example, here, we show the cage topology graph of metal-organic cages
as defined by the metal atoms only. We start by building a series of
Pd_nL_n2 metal-organic cages, with n=2,3,4,6 and the same organic ligand,
using stk.

.. GENERATED FROM PYTHON SOURCE LINES 216-268

.. code-block:: Python



    structures = [
        # A metal-organic cage.
        stk.ConstructedMolecule(
            func(
                building_blocks=(
                    stk.BuildingBlock(
                        smiles="[Pd+2]",
                        functional_groups=(
                            stk.SingleAtom(stk.Pd(0, charge=2)) for i in range(4)
                        ),
                        position_matrix=[[0.0, 0.0, 0.0]],
                    ),
                    stk.BuildingBlock(
                        smiles=("C1=NC=CC(C2=CC=CC(C3=CC=NC=C3)=C2)=C1"),
                        functional_groups=[
                            stk.SmartsFunctionalGroupFactory(
                                smarts="[#6]~[#7X2]~[#6]",
                                bonders=(1,),
                                deleters=(),
                            ),
                        ],
                    ),
                ),
                # Ensure that bonds between the
                # GenericFunctionalGroups of the ligand and the
                # SingleAtom functional groups of the metal are
                # dative.
                reaction_factory=stk.DativeReactionFactory(
                    stk.GenericReactionFactory(
                        bond_orders={
                            frozenset(
                                {
                                    stk.GenericFunctionalGroup,
                                    stk.SingleAtom,
                                }
                            ): 9,
                        },
                    ),
                ),
            ),
        )
        for func in (
            stk.cage.M2L4Lantern,
            stk.cage.M3L6,
            stk.cage.M4L8,
            stk.cage.M6L12Cube,
        )
    ]









.. GENERATED FROM PYTHON SOURCE LINES 269-270

Again, we write some properties.

.. GENERATED FROM PYTHON SOURCE LINES 271-282

.. code-block:: Python


    energy = stko.UFFEnergy(ignore_inter_interactions=False)
    shape_calc = stko.ShapeCalculator()
    properties = {
        "uffenergy": [energy.get_energy(molecule) for molecule in structures],
        "aspheriticty": [
            shape_calc.get_results(molecule).get_asphericity() for molecule in structures
        ],
    }









.. GENERATED FROM PYTHON SOURCE LINES 283-285

Now, we use some stk features to extract the metal atoms, and create "fake"
bonds between them.

.. GENERATED FROM PYTHON SOURCE LINES 286-299

.. code-block:: Python


    metal_atoms = [
        # Atoms with atomic number 46 (Pd).
        [i.get_id() for i in molecule.get_atoms() if i.get_atomic_number() == 46]
        for molecule in structures
    ]

    fake_bonds = [
        # Combinations of those atoms, this does not filter for nearest neighbors.
        [(a1id, a2id) for a1id, a2id in it.combinations(metal_atoms[i], 2)]
        for i, molecule in enumerate(structures)
    ]








.. GENERATED FROM PYTHON SOURCE LINES 300-304

With these fake bonds, we can create a new list of stk structures only having
the fake bonds, to extract the shape dictionary defined by only the fake
bonds. Note that these fake bonds could be arbitrarily defined, as long as
they map to the atoms in the original structure.

.. GENERATED FROM PYTHON SOURCE LINES 305-323

.. code-block:: Python


    structures_with_pd_pd_bonds = [
        stk.BuildingBlock.init(
            atoms=struct.get_atoms(),
            # Only including fake bonds.
            bonds=tuple(
                stk.Bond(
                    atom1=next(struct.get_atoms(a1id)),
                    atom2=next(struct.get_atoms(a2id)),
                    order=1,
                )
                for a1id, a2id in fake_bonds[i]
            ),
            position_matrix=struct.get_position_matrix(),
        )
        for i, struct in enumerate(structures)
    ]








.. GENERATED FROM PYTHON SOURCE LINES 324-326

Another feature of the shape dictionary is that the user can alter the color
and radius of the bonds.

.. GENERATED FROM PYTHON SOURCE LINES 327-338

.. code-block:: Python


    shape_dict = chemiscope.convert_stk_bonds_as_shapes(
        frames=structures_with_pd_pd_bonds,
        bond_color="#fc5500",
        bond_radius=0.2,
    )

    # Write the shape string for settings to turn them on automatically.
    shape_string = ",".join(shape_dict.keys())









.. GENERATED FROM PYTHON SOURCE LINES 339-341

Now, we show the structure with the new fake bonds overlaid
(`bonds` and `shape` on).

.. GENERATED FROM PYTHON SOURCE LINES 342-360

.. code-block:: Python


    chemiscope.show(
        frames=structures,
        properties=properties,
        shapes=shape_dict,
        settings=chemiscope.quick_settings(
            x="aspheriticty",
            y="uffenergy",
            color="",
            structure_settings={
                "shape": shape_string,
                "atoms": True,
                "bonds": True,
                "spaceFilling": False,
            },
        ),
    )



.. chemiscope:: _datasets/fig_9-showing-custom-bonds_017.json.gz
            :mode: default
            :warning_timeout: 2000
        


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 361-362

Write to json file.

.. GENERATED FROM PYTHON SOURCE LINES 363-382

.. code-block:: Python


    chemiscope.write_input(
        path="shape_example.json.gz",
        frames=structures,
        properties=properties,
        meta=dict(name="Added Pd-Pd bonds overlaid with the stk molecule."),
        settings=chemiscope.quick_settings(
            x="aspheriticty",
            y="uffenergy",
            color="",
            structure_settings={
                "shape": shape_string,
                "atoms": True,
                "bonds": True,
                "spaceFilling": False,
            },
        ),
        shapes=shape_dict,
    )








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.524 seconds)


.. _sphx_glr_download_examples_9-showing-custom-bonds.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 9-showing-custom-bonds.ipynb <9-showing-custom-bonds.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 9-showing-custom-bonds.py <9-showing-custom-bonds.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 9-showing-custom-bonds.zip <9-showing-custom-bonds.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
